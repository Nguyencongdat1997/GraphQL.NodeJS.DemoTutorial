// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { User, User_name, Role, Context } from "../types";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsGet_api_v1_users_userId {
    userId: string;
  }

  export interface ArgsGet_api_v1_roles_roleId {
    roleId: string;
  }

  export type Get_Resolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type Get_api_v1_usersResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | Promise<User[]>;

  export type Get_api_v1_users_userIdResolver = (
    parent: undefined,
    args: ArgsGet_api_v1_users_userId,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type Get_api_v1_rolesResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Role[] | Promise<Role[]>;

  export type Get_api_v1_roles_roleIdResolver = (
    parent: undefined,
    args: ArgsGet_api_v1_roles_roleId,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Role | Promise<Role>;

  export interface Type {
    get_: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    get_api_v1_users: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User[] | Promise<User[]>;

    get_api_v1_users_userId: (
      parent: undefined,
      args: ArgsGet_api_v1_users_userId,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    get_api_v1_roles: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Role[] | Promise<Role[]>;

    get_api_v1_roles_roleId: (
      parent: undefined,
      args: ArgsGet_api_v1_roles_roleId,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Role | Promise<Role>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    _id: (parent: User) => (parent._id === undefined ? null : parent._id),
    role: (parent: User) => (parent.role === undefined ? null : parent.role)
  };

  export type _idResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type NameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User_name | null | Promise<User_name | null>;

  export type RoleResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    _id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    name: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User_name | null | Promise<User_name | null>;

    role: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace User_nameResolvers {
  export const defaultResolvers = {
    lastName: (parent: User_name) =>
      parent.lastName === undefined ? null : parent.lastName,
    firstName: (parent: User_name) =>
      parent.firstName === undefined ? null : parent.firstName
  };

  export type LastNameResolver = (
    parent: User_name,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type FirstNameResolver = (
    parent: User_name,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    lastName: (
      parent: User_name,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    firstName: (
      parent: User_name,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace RoleResolvers {
  export const defaultResolvers = {
    _id: (parent: Role) => (parent._id === undefined ? null : parent._id),
    title: (parent: Role) => (parent.title === undefined ? null : parent.title)
  };

  export type _idResolver = (
    parent: Role,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type TitleResolver = (
    parent: Role,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    _id: (
      parent: Role,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    title: (
      parent: Role,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface UserInput {
    name?: UserInput_nameInput | null;
    role?: string | null;
  }
  export interface UserInput_nameInput {
    lastName?: string | null;
    firstName?: string | null;
  }

  export interface ArgsPost_api_v1_users {
    user?: UserInput | null;
  }

  export interface ArgsPut_api_v1_users_userId {
    userId: string;
    user?: UserInput | null;
  }

  export interface ArgsDelete_api_v1_users_userId {
    userId: string;
  }

  export type Post_api_v1_usersResolver = (
    parent: undefined,
    args: ArgsPost_api_v1_users,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type Put_api_v1_users_userIdResolver = (
    parent: undefined,
    args: ArgsPut_api_v1_users_userId,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type Delete_api_v1_users_userIdResolver = (
    parent: undefined,
    args: ArgsDelete_api_v1_users_userId,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    post_api_v1_users: (
      parent: undefined,
      args: ArgsPost_api_v1_users,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    put_api_v1_users_userId: (
      parent: undefined,
      args: ArgsPut_api_v1_users_userId,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    delete_api_v1_users_userId: (
      parent: undefined,
      args: ArgsDelete_api_v1_users_userId,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
  User_name: User_nameResolvers.Type;
  Role: RoleResolvers.Type;
  Mutation: MutationResolvers.Type;
}
